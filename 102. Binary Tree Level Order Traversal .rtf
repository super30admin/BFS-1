{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red25\green25\blue25;}
{\*\expandedcolortbl;;\cssrgb\c12941\c12941\c12941;}
\margl1440\margr1440\vieww9680\viewh6580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
# Definition for a binary tree node.\
# class TreeNode:\
#     def __init__(self, val=0, left=None, right=None):\
#         self.val = val\
#         self.left = left\
#         self.right = right\
class Solution:\
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:\
        \
        if not root:\
            return []\
        queue = deque([root])\
        res = [[root.val]]\
        \
        while queue:\
            size = len(queue)\
            temp = []\
            for i in range(size):\
                node = queue.popleft()\
                \
                if node.left:\
                    temp.append(node.left.val)\
                    queue.append(node.left)\
                    \
                if node.right:\
                    temp.append(node.right.val)\
                    queue.append(node.right)\
            if temp:        \
                res.append(temp)\
            \
        return res\
                    \
        }