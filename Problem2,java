
//Accepted on LT
//Have a hashmap and hash set to store which course depend on which course and count of it and keep reducing it .
//Time should be O(n)
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
    
        HashMap<Integer,List<Integer>> hm = new HashMap<>();
        int[] list = new int[numCourses];
        Queue<Integer> q = new LinkedList<>();
        for(int[] item : prerequisites){
            int mainc = item[0];
            int pre = item[1];
            list[mainc] += 1;
            if(hm.containsKey(pre)){
                List<Integer> l = hm.get(pre);
                l.add(mainc);
                hm.put(pre,l);
            }
            else{
                List<Integer> newList = new ArrayList<>();
                newList.add(mainc);
                hm.put(pre,newList);
            }

        }
        for(int i=0;i<list.length;i++){
            if(list[i]==0){
                q.add(i);
            }
            
        }
        while(!q.isEmpty()){
            int popitem = q.poll();
            List<Integer> l2 = hm.get(popitem);
            if(l2!=null){
                for(int item : l2){
                    list[item] = list[item]-1;
                    
                    if(list[item]==0){
                        q.add(item);
                    }
                }

            }
            
        }
        for(int item:list){
            System.out.println(item);
            if(item!=0){
                return false;
            }
        }
        return true;
    }
}