Using Queue
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        List<List<Integer>> result = new ArrayList<>();
        
        if(root == null)
            return result;
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        while(!queue.isEmpty())
        {
            int size = queue.size();
            List<Integer> l1 = new ArrayList<>();

            for(int i=0; i<size; i++)
            {
                TreeNode temp = queue.poll();
                System.out.print("temp: "+temp);
              
                l1.add(temp.val);
               
                
                if(temp.left != null)
                    queue.add(temp.left);
            
                if(temp.right != null)
                    queue.add(temp.right);
            }
            
            
            result.add(l1);
            
        }
        
        return result;
        
    }
}





//Recursion
class Solution {
    
    List<List<Integer>> result = new ArrayList<>();
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        if(root == null) return result;
        
        helper(root, 0);
        
        return result;
        
    }
    
    private void helper(TreeNode root, int level)
    {
        if(result.size() ==level)
            result.add(new ArrayList<Integer>());
        
        result.get(level).add(root.val);
        
        if(root.left != null)
            helper(root.left, level +1);
        
        if(root.right != null)
            helper(root.right, level +1);
        
    }
}
