// I need the nodes in the order they are present in the tree (left to right) FIFO
// poll() and offer() functions of queue is always a good practice.
// time and space complexity: O(n)

class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return new ArrayList();
        List<List<Integer>> output = new ArrayList<>();
        Queue<TreeNode> que = new LinkedList<>();
        que.add(root);
        
       while(! que.isEmpty()){
           int size = que.size();
           List<Integer> temp = new ArrayList<>();
           
           for(int i =0; i< size; i++){
                TreeNode node = que.poll();
                temp.add(node.val);
                if(node.left != null) que.offer(node.left);
                if(node.right != null) que.offer(node.right);
           }
           output.add(temp);
        }
        
        return output;
    }
}
