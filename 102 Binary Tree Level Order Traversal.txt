102. Binary Tree Level Order Traversal


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//DFS
 //TC=O(n)  SC=O(n)

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> levelOrder(TreeNode root) {
        result=new ArrayList<>();
        if(root==null)return result;
        dfs(root,0);
        return result;
    }
    private void dfs(TreeNode root, int level){
        //base
        if(root==null)return;
        if(level==result.size()){
            result.add(new ArrayList<>());
        }
        result.get(level).add(root.val);
        dfs(root.left,level+1);
        dfs(root.right,level+1);
    }
}

/*

 //BFS 
 //TC=O(n)  SC=O(n)
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
         List<List<Integer>>result=new ArrayList<>();
         if(root==null)return result;
         Queue<TreeNode> q=new LinkedList<>();
         q.add(root);
         while(!q.isEmpty()){
             int size=q.size();
             List<Integer>li=new ArrayList<>();
             for(int i=0;i<size;i++){
                 TreeNode ele=q.poll();
                 li.add(ele.val);
                 if(ele.left!=null)q.add(ele.left);
                 if(ele.right!=null)q.add(ele.right);
             }
                result.add(li);
         }
         return result;  
    }
}
*/
