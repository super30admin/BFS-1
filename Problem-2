//Time: O(V*E) : we stored all vertices in queue ie all courses, for each vertex we processed all its dependent course can be considered as edges
//SPace: O(V+E) : space in hashmap : we are storing all courses -V and its dependents which is E
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegree=new int[numCourses];
        HashMap<Integer,List<Integer>> map=new HashMap<>();
        for(int i=0;i<prerequisites.length;i++)
        {
            indegree[prerequisites[i][0]]++;
            if(!map.containsKey(prerequisites[i][1]))
            {
                map.put(prerequisites[i][1], new ArrayList<>());
            }
                map.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        Queue<Integer> q=new LinkedList<>();
        //first put all indexes in queue which has indegree 0
        for(int i=0;i<indegree.length;i++)
        {
            if(indegree[i]==0)
                q.add(i);
        }
        
        while(!q.isEmpty())
        {    //check first course
            int course=q.poll();
            //check the dependent course in map of this map
            List<Integer> dependents = map.get(course);
            //iterator on each dependents , cehck its indegree and reduce by 1 because the corresponding course has been polled so dependents must have been reduced by 1 dependency
            if(dependents!=null)
            {
               for(int child : dependents)
               {
                   indegree[child]--; 
                   if(indegree[child]==0)
                       q.add(child);
               }
            }    
        }
        //if indegree array has couses left , it might have more than 0 count
       for(int i=0;i<indegree.length;i++)
        {
            if(indegree[i]>0)
               return false;
        }
        return true;
    }
}
