// Time Complexity : O(n) - where n is the number of nodes in a tree.
// Space Complexity : O(h) - where h is the height of the tree.
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach ; I used a DFS approach going in depth and adding each element at the corresponding level.

class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> levelOrder(TreeNode root) {
             result=new ArrayList<>();
             if(root==null) return result;
             dfs(root,0);
             return result; 
    }
    
    private void dfs(TreeNode root, int level){
      //base
         if(root==null) return;   
        //logic
        if(result.size()==level){
            result.add(new ArrayList());
        }
        result.get(level).add(root.val);
        dfs(root.left,level+1);
        dfs(root.right,level+1);
    }
}



// Time Complexity : O(n) - where n is the number of nodes in the tree.
// Space Complexity : O(n/2) -> O(n) n/2 leaf nodes.
// Did this code successfully run on Leetcode : Yes.
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach : I used a Queue for BFS approach, going level by level and adding neighbors to the queue.
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result=new ArrayList<>();
             if(root==null) return result;
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size=q.size();
            List<Integer> temp=new ArrayList<>();
            for(int i=0;i<size;i++){
                TreeNode curr=q.poll();
                temp.add(curr.val);
                if(curr.left!=null) q.add(curr.left); //check for the immediate left.
                if(curr.right!=null) q.add(curr.right);
            }
            result.add(temp);
        }
       return result; 
    }
}