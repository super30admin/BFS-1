class Solution {

    /** Time complexity - O(V+E)
    Space Complexity - O(V+E)
     */
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites == null || prerequisites.length == 0) {
            return true;
        }

        List[] map = new ArrayList[numCourses];
        int[] indegree = new int[numCourses];

        for (int i=0; i <numCourses; i++) {
            map[i] = new ArrayList<>();
        }

        for(int[] prereq: prerequisites) {
            indegree[prereq[1]]++;
            map[prereq[0]].add(prereq[1]);
        }

        Queue<Integer> queue = new LinkedList<>();
        int count = 0;
        for (int i=0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.add(i);
                count++;
            }
        }

      

        while (!queue.isEmpty()) {
            int val = queue.poll();
            
            for(int i=0; i < map[val].size(); i++) {
                int e = (int)map[val].get(i);
                indegree[e]--;

                if (indegree[e] == 0) {
                    queue.add(e);
                    count++;
                }
            }
        }
        return count == numCourses;
    }
}
