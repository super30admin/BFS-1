// Time Complexity : O(n) where n is the number of nodes in the tree.
// Space Complexity : O(n/2)-> O(n)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this :No


// Your code here along with comments explaining your approach: I used a BFS approach. Iterating thought the elements level by level. Always add the element at the last at each level. This will give the right side view.



class Solution {
    List<Integer> result;
    public List<Integer> rightSideView(TreeNode root) {
        result=new ArrayList<>();
        if(root==null) return result;
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        int last=-1;
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0;i<size;i++){
                TreeNode curr=q.poll();
                if(i==size-1){
                           last=curr.val;
                }
                if(curr.left!=null) q.add(curr.left);
                if(curr.right!=null) q.add(curr.right);
            }
            result.add(last);
           
        }
        return result;
    }
}
// Time Complexity : O(n) - where n is the number of nodes in the tree.
// Space Complexity :O(h)- that's the max number of elements that will be stored in a DFS. 'H' is the height of the tree.
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No


// Your code here along with comments explaining your approach: DFS approach. Add elements at each level as we go. We go to the right hand side first and ass the level==result.size() we add the element. Add all the elements from the right first. Even when we do a bfs on the left hand side we go the right subtree first and if there is an additional level below that we missed, that will be added as well.

class Solution {
    List<Integer> result;
    public List<Integer> rightSideView(TreeNode root) {
        result=new ArrayList<>();
        if(root==null) return result;
        dfs(root,0);
        return result;
    }
    private void dfs(TreeNode root,int level){
        //base
        if(root==null) return;
        //logic
        if(level==result.size()) result.add(root.val);
        dfs(root.right,level+1);
        dfs(root.left,level+1);
    }
}