//TC : O(V + E)
//SC : O(V + E)

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int[] indegrees = new int[numCourses];
        Map<Integer, List<Integer>> map = new HashMap<>();

        int coursesComplete = 0;
        Queue<Integer> q = new LinkedList();

        for(int[] edge : prerequisites){
            int in = edge[0];
            int out = edge[1];

            indegrees[in]++;
            if(!map.containsKey(out)){
                map.put(out, new ArrayList());
            }
            map.get(out).add(in);
        }

         for(int i = 0;i< numCourses;i++){
             if(indegrees[i]==0){
                 q.add(i);
                 coursesComplete++;
             }
         }   

        while(!q.isEmpty()){
            int curr = q.poll();
            List<Integer> edges = map.get(curr);
            if(edges != null){
                for(int edge : edges){
                    indegrees[edge]--;
                    if(indegrees[edge]==0){
                        coursesComplete++;
                        q.add(edge);
                    }
                }
            }
        } 

        return numCourses == coursesComplete;
    }
}
