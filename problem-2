class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        int[] indegree=new int[numCourses];
        HashMap<Integer,List<Integer>> hm=new HashMap<>();
        
        for(int i=0;i<prerequisites.length;i++){
            
            indegree[prerequisites[i][0]]++;
             if(!hm.containsKey(prerequisites[i][1])){
            hm.add(prerequisites[i][1],new ArrayList<Integer>());
            }
           
                
               
                hm.get(prerequisites[i][1]).add(prerequisites[i][0]);
            
        }
        Queue<Integer> q=new LinkedList<>();
        int count=0;
        
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                q.add(i);
                count++;
            }
            
        }
        if(q.isEmpty()){
            return false;
        }
        while(!q.isEmpty()){
            int curr=q.poll();
            List<Integer> li=hm.get(curr);
                if(li!=null){
                    for(int child:li){
                        indegree[child]--;
                         if(indegree[child]==0){
                q.add(child);
                count++;
                             if(count==numCourses){
                                 return true;
                             }
            }
                    }
                }
        }
        
        return false;
    }
}
