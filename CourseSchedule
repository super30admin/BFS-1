// Time Complexity : O(V+E)
// Space Complexity : O(V+E)
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (numCourses == 0)
            return false;
        Queue<Integer> q = new LinkedList<>();
        int total = 0;
        HashMap<Integer, List<Integer>> map = new HashMap();
        int[] indegrees = new int[numCourses];
        for (int[] edge : prerequisites) {
            indegrees[edge[0]]++;
            if (!map.containsKey(edge[1]))
                map.put(edge[1], new ArrayList());
            map.get(edge[1]).add(edge[0]);
        }
        for (int i = 0; i < numCourses; i++) {
            if (indegrees[i] == 0)
                q.add(i);
        }
        while (!q.isEmpty()) {
            int curr = q.poll();
            total++;
            List<Integer> depCourses = map.get(curr);
            if (depCourses != null) {
                for (int edge : depCourses) {
                    indegrees[edge]--;
                    if (indegrees[edge] == 0)
                        q.add(edge);
                }
            }
        }
        return total == numCourses;
    }
}
