/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    //102. Binary Tree Level Order Traversal
    //Using DFS
    //Time complexity : O(n)
    //Space complexity : O(height)
    
    List<List<Integer>> result;
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        result = new ArrayList<>();
        if(root == null)
            return result;
        
        helper(root,0);
        return result;
    }
   private void helper(TreeNode root,int level){
        
        //Base condition
        if(root == null)
            return;

        if(level == result.size())
            result.add(new ArrayList<>());
        
        result.get(level).add(root.val);
        
        helper(root.left,level+1);
        helper(root.right,level+1);
    }
}