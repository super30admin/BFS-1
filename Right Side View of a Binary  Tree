Approach1 : BFS
Time Compplexity : O(N)
Space COmplexity : O(N/2) ----> O(N)
class Solution:
    def rightSideView(self, root: TreeNode) -> List[int]:
    
        result = []
        
        if root:
            queue = deque() 
            queue.append(root)
            
            while queue:
                length = len(queue) ### Size of the queue
                
                for _ in range(length):
                    node = queue.popleft()
                    
                    if node.left:
                        queue.append(node.left)
                    if node.right:
                        queue.append(node.right)
                
                result.append(node.val)
        
        return result
  
  Approach 2 : DFS
  Time COmplexity : O(N)
  Space Complexity: O(N)
  class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        res = []
        self.dfs(root, 0, res)
        return res

    def dfs(self, root, level, res):
        if not root:
            return
        if len(res) == level:
            res.append(root.val)

        self.dfs(root.right, level+1, res)
        self.dfs(root.left, level+1, res)

