/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// time Complexity = O(n)
// space complexity = O(n)
// executed on leetcode
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q1=new LinkedList<>();// to store alternate level elements
        Queue<TreeNode> q2=new LinkedList<>();// to store alternate level elements
        boolean flag=true; // to indicate whick queue to remove elements
        List<List<Integer>> fin=new ArrayList<>();
        if(root==null) return fin;
        q1.add(root);
        while(q1.size()!=0 || q2.size()!=0)
        {
            List<Integer> l1=new ArrayList<>();
            if(flag==true) // remove ele from queue 1 
            {
                while(q1.size()!=0)
                {
                    TreeNode temp=q1.remove();
                    l1.add(temp.val);
                    if(temp.left!=null) q2.add(temp.left);// add the next elements into queue2
                    if(temp.right!=null) q2.add(temp.right);
                }
                flag=false;
                fin.add(l1);
            }
            else // remove ele from queue2
            {
                while(q2.size()!=0)
                {
                    TreeNode temp=q2.remove();
                    l1.add(temp.val);
                    if(temp.left!=null) q1.add(temp.left); // add the next elements inti queue1
                    if(temp.right!=null) q1.add(temp.right);
                }
                flag=true;
                fin.add(l1);
            }
        }
        return fin;
    }
}





or





/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// time Complexity = O(n)
// space complexity = O(n)
// executed on leetcode
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q1=new LinkedList<>();// to store alternate level elements
        List<List<Integer>> fin=new ArrayList<>();
        if(root ==null) return fin;
        q1.add(root);
        while(q1.size()!=0)
        {
            int x=q1.size();
            List<Integer> l1=new ArrayList<>();
            for(int i=0;i<x;i++)
            {
                TreeNode temp=q1.remove();
                l1.add(temp.val);
                if(temp.left!=null) q1.add(temp.left);
                if(temp.right!=null) q1.add(temp.right);
            }
            fin.add(l1);
        }
    
        return fin;
    }
}