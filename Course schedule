class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        HashMap<Integer, List<Integer>> adjList = new HashMap<>();
        int[] indegree = new int[numCourses];
        
        for(int[] prereq : prerequisites){
            int dependent = prereq[0];
            int independent = prereq[1];
            
            if(!adjList.containsKey(independent)){
                adjList.put(independent, new ArrayList<>());
            }
            
            adjList.get(independent).add(dependent);
                indegree[dependent]++; 
        }
        
        Queue<Integer> q = new LinkedList<>();
        
        for(int i = 0; i<numCourses; i++){
            if(indegree[i] ==0){
                q.add(i);
            }
        }
        
        int completeCourses = 0;
        
        while(!q.isEmpty()){
            
            int course = q.remove();
            completeCourses++;
            
            List<Integer> dependents = adjList.get(course);
            if(dependents != null){
                for(int dependent : dependents){
                    indegree[dependent]--;
                    if(indegree[dependent] == 0){
                        q.add(dependent);
                    }
                }
            }

        
        }
        
        return completeCourses == numCourses;
        
        
        
    }
}
