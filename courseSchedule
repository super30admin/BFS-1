class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        
        int[] indegrees = new int[numCourses];
        HashMap<Integer,List<Integer>> map = new HashMap<>();
        
        for(int[] edge : prerequisites){
            indegrees[edge[0]]++;
            
            if(!map.containsKey(edge[1])){
                map.put(edge[1],new ArrayList<>());
            }
            map.get(edge[1]).add(edge[0]);
            
        }
        
        Queue<Integer> q = new LinkedList<>();
        int count =0;
        for(int i =0;i<indegrees.length;i++){
            if(indegrees[i]==0)
                q.add(i);
        }
        
        while(!q.isEmpty()){
            int current = q.poll();
            count++;
            
            List<Integer> edges = map.get(current);
            if(edges!=null){
                for(int e :edges){
                    indegrees[e]--;
                    if(indegrees[e]==0)
                        q.add(e);
                }
            }
        }
        if(count!=numCourses)
            return false;
        return true;
        
    }
}