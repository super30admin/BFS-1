//BFS
//create a queue and add root and iterate over queue size to get the same level nodes, and pop the parent to temp; then add its children
//tc: O(n) where n is no.of nodes
//sc: n/2 --> O(n) max leaf nodes or 2^(l-1) where l is level
//passed on leetcode: yes
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        while (!q.isEmpty()) {
            int size = q.size();
            List<Integer> temp =  new ArrayList<>();
            for(int i =0; i<size;i++) {
                TreeNode curr = q.poll();
                temp.add(curr.val);
                if (curr.left!=null) q.add(curr.left);
                if (curr.right!=null) q.add(curr.right);
            }
            result.add(temp);
        }
        return result;
    }
}
//////DFS
//TC: O(n)
//SC: O(n)
//PASSED ON LEETCODE: YES
class Solution {
    List<List<Integer>> result;
    public List<List<Integer>> levelOrder(TreeNode root) {
        result = new ArrayList<>();
        dfs(root,0); //passing intial root & level 0 in recursion
        return result;
    }
    
    private void dfs(TreeNode root, int level){ //
        if (root == null) return;
        if (level == result.size()){ //if level is same as result size, then that level doesn't exist
            result.add(new ArrayList());
        }
        result.get(level).add(root.val);
        dfs(root.left,level+1);
        dfs(root.right,level+1);
    }
    
}
